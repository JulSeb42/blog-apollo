[{
  "_id": {
    "$oid": "635fbc8d2834c31256b760ac"
  },
  "email": "julien@admin.com",
  "fullName": "Julien Admin",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..zLX5AOQDb9KdNd3_swTsiHKtld3mt80uGuaKf7c0RNI",
  "bio": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "imageUrl": "https://randomuser.me/api/portraits/men/0.jpg",
  "password": "$2a$10$aMWn6711U1CqQUW/VbSbZOdK8wesZzGVPhNWYASkM7WwFHqDPVT8a",
  "generatedPassword": "$2a$10$HqYapHMyPkTnAFVY/b4vI.MWeCzbnTqqHS9OgTQ9Wvy8YTKCC0QgG",
  "role": "admin",
  "approved": true,
  "featured": true,
  "__v": 0,
  "createdAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1667244033436"
    }
  }
},{
  "_id": {
    "$oid": "635fbc8d2834c31256b760ad"
  },
  "email": "julien@moderator.com",
  "fullName": "Julien Moderator",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imp1bGllbkBtb2RlcmF0b3IuY29tIiwiZnVsbE5hbWUiOiJKdWxpZW4gTW9kZXJhdG9yIiwicm9sZSI6Im1vZGVyYXRvciIsImJpbyI6IkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIiwicGFzc3dvcmQiOiIkMmEkMTAkSHFZYXBITXlQa1RuQUZWWS9iNHZJLlNldmxtUHR2YVZ6ODl2OVQxcXh6ekdiOWRKa2NJc3kiLCJhcHByb3ZlZCI6dHJ1ZSwiZ2VuZXJhdGVkUGFzc3dvcmQiOiIkMmEkMTAkSHFZYXBITXlQa1RuQUZWWS9iNHZJLk1XZUN6Ym5UcXFIUzlPZ1RROVd2eThZVEtDQzBRZ0ciLCJpbWFnZVVybCI6Imh0dHBzOi8vcmFuZG9tdXNlci5tZS9hcGkvcG9ydHJhaXRzL3dvbWVuLzIuanBnIiwiZmVhdHVyZWQiOmZhbHNlLCJpYXQiOjE2NjcyMTg1NzMsImV4cCI6MTY2ODA4MjU3M30.HpqXxR91TOQwtzGVuHUVpaAh--Nvyt8_wFadUKgJIzU",
  "bio": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "imageUrl": "https://randomuser.me/api/portraits/men/10.jpg",
  "password": "$2a$10$HqYapHMyPkTnAFVY/b4vI.SevlmPtvaVz89v9T1qxzzGb9dJkcIsy",
  "generatedPassword": "$2a$10$HqYapHMyPkTnAFVY/b4vI.MWeCzbnTqqHS9OgTQ9Wvy8YTKCC0QgG",
  "role": "moderator",
  "approved": true,
  "featured": false,
  "__v": 0,
  "createdAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  }
},{
  "_id": {
    "$oid": "635fbc8d2834c31256b760ae"
  },
  "email": "julien@writer.com",
  "fullName": "Julien Writer",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imp1bGllbkB3cml0ZXIuY29tIiwiZnVsbE5hbWUiOiJKdWxpZW4gV3JpdGVyIiwicm9sZSI6IndyaXRlciIsImJpbyI6IkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIiwicGFzc3dvcmQiOiIkMmEkMTAkSHFZYXBITXlQa1RuQUZWWS9iNHZJLlNldmxtUHR2YVZ6ODl2OVQxcXh6ekdiOWRKa2NJc3kiLCJhcHByb3ZlZCI6dHJ1ZSwiZ2VuZXJhdGVkUGFzc3dvcmQiOiIkMmEkMTAkSHFZYXBITXlQa1RuQUZWWS9iNHZJLk1XZUN6Ym5UcXFIUzlPZ1RROVd2eThZVEtDQzBRZ0ciLCJpbWFnZVVybCI6Imh0dHBzOi8vcmFuZG9tdXNlci5tZS9hcGkvcG9ydHJhaXRzL3dvbWVuLzE1LmpwZyIsImZlYXR1cmVkIjpmYWxzZSwiaWF0IjoxNjY3MjE4NTczLCJleHAiOjE2NjgwODI1NzN9.Grrr6B9cXnkAWZQyVRsM-Nm4xaLmLygYrUeKwGXSGBI",
  "bio": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "imageUrl": "https://randomuser.me/api/portraits/men/18.jpg",
  "password": "$2a$10$HqYapHMyPkTnAFVY/b4vI.SevlmPtvaVz89v9T1qxzzGb9dJkcIsy",
  "generatedPassword": "$2a$10$HqYapHMyPkTnAFVY/b4vI.MWeCzbnTqqHS9OgTQ9Wvy8YTKCC0QgG",
  "role": "writer",
  "approved": true,
  "featured": true,
  "__v": 0,
  "createdAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  }
},{
  "_id": {
    "$oid": "635fbc8d2834c31256b760af"
  },
  "email": "geovany-considine@email.com",
  "fullName": "Geovany Considine",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imdlb3ZhbnktY29uc2lkaW5lQGVtYWlsLmNvbSIsImZ1bGxOYW1lIjoiR2VvdmFueSBDb25zaWRpbmUiLCJyb2xlIjoid3JpdGVyIiwiYmlvIjoiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4iLCJwYXNzd29yZCI6IiQyYSQxMCRIcVlhcEhNeVBrVG5BRlZZL2I0dkkuU2V2bG1QdHZhVno4OXY5VDFxeHp6R2I5ZEprY0lzeSIsImFwcHJvdmVkIjp0cnVlLCJnZW5lcmF0ZWRQYXNzd29yZCI6IiQyYSQxMCRIcVlhcEhNeVBrVG5BRlZZL2I0dkkuTVdlQ3piblRxcUhTOU9nVFE5V3Z5OFlUS0NDMFFnRyIsImltYWdlVXJsIjoiaHR0cHM6Ly9yYW5kb211c2VyLm1lL2FwaS9wb3J0cmFpdHMvd29tZW4vMi5qcGciLCJmZWF0dXJlZCI6dHJ1ZSwiaWF0IjoxNjY3MjE4NTczLCJleHAiOjE2NjgwODI1NzN9.cua9sissGbmcwfqmMb_MRYjEAwX0SkWPHxCkHjEyu3g",
  "bio": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "imageUrl": "https://randomuser.me/api/portraits/men/9.jpg",
  "password": "$2a$10$HqYapHMyPkTnAFVY/b4vI.SevlmPtvaVz89v9T1qxzzGb9dJkcIsy",
  "generatedPassword": "$2a$10$HqYapHMyPkTnAFVY/b4vI.MWeCzbnTqqHS9OgTQ9Wvy8YTKCC0QgG",
  "role": "writer",
  "approved": true,
  "featured": false,
  "__v": 0,
  "createdAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  }
},{
  "_id": {
    "$oid": "635fbc8d2834c31256b760b0"
  },
  "email": "rusty-emard@email.com",
  "fullName": "Rusty Emard",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InJ1c3R5LWVtYXJkQGVtYWlsLmNvbSIsImZ1bGxOYW1lIjoiUnVzdHkgRW1hcmQiLCJyb2xlIjoibW9kZXJhdG9yIiwiYmlvIjoiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4iLCJwYXNzd29yZCI6IiQyYSQxMCRIcVlhcEhNeVBrVG5BRlZZL2I0dkkuU2V2bG1QdHZhVno4OXY5VDFxeHp6R2I5ZEprY0lzeSIsImFwcHJvdmVkIjp0cnVlLCJnZW5lcmF0ZWRQYXNzd29yZCI6IiQyYSQxMCRIcVlhcEhNeVBrVG5BRlZZL2I0dkkuTVdlQ3piblRxcUhTOU9nVFE5V3Z5OFlUS0NDMFFnRyIsImltYWdlVXJsIjoiaHR0cHM6Ly9yYW5kb211c2VyLm1lL2FwaS9wb3J0cmFpdHMvbWVuLzE0LmpwZyIsImZlYXR1cmVkIjpmYWxzZSwiaWF0IjoxNjY3MjE4NTczLCJleHAiOjE2NjgwODI1NzN9.kDQ4bdudLzYj9M0n9CnPmaNmLbmwsRMzGE4iZFYiAjE",
  "bio": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "imageUrl": "https://randomuser.me/api/portraits/men/11.jpg",
  "password": "$2a$10$HqYapHMyPkTnAFVY/b4vI.SevlmPtvaVz89v9T1qxzzGb9dJkcIsy",
  "generatedPassword": "$2a$10$HqYapHMyPkTnAFVY/b4vI.MWeCzbnTqqHS9OgTQ9Wvy8YTKCC0QgG",
  "role": "writer",
  "approved": true,
  "featured": true,
  "__v": 0,
  "createdAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  }
},{
  "_id": {
    "$oid": "635fbc8d2834c31256b760b1"
  },
  "email": "efren-littel@email.com",
  "fullName": "Efren Littel",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImVmcmVuLWxpdHRlbEBlbWFpbC5jb20iLCJmdWxsTmFtZSI6IkVmcmVuIExpdHRlbCIsInJvbGUiOiJtb2RlcmF0b3IiLCJiaW8iOiJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiIsInBhc3N3b3JkIjoiJDJhJDEwJEhxWWFwSE15UGtUbkFGVlkvYjR2SS5TZXZsbVB0dmFWejg5djlUMXF4enpHYjlkSmtjSXN5IiwiYXBwcm92ZWQiOnRydWUsImdlbmVyYXRlZFBhc3N3b3JkIjoiJDJhJDEwJEhxWWFwSE15UGtUbkFGVlkvYjR2SS5NV2VDemJuVHFxSFM5T2dUUTlXdnk4WVRLQ0MwUWdHIiwiaW1hZ2VVcmwiOiJodHRwczovL3JhbmRvbXVzZXIubWUvYXBpL3BvcnRyYWl0cy9tZW4vMTcuanBnIiwiZmVhdHVyZWQiOnRydWUsImlhdCI6MTY2NzIxODU3MywiZXhwIjoxNjY4MDgyNTczfQ.TfDXyP6D3HLIY-TEttivncgu0gWwNrkWHpt7cA2xqJE",
  "bio": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  "imageUrl": "https://randomuser.me/api/portraits/women/4.jpg",
  "password": "$2a$10$HqYapHMyPkTnAFVY/b4vI.SevlmPtvaVz89v9T1qxzzGb9dJkcIsy",
  "generatedPassword": "$2a$10$HqYapHMyPkTnAFVY/b4vI.MWeCzbnTqqHS9OgTQ9Wvy8YTKCC0QgG",
  "role": "writer",
  "approved": true,
  "featured": true,
  "__v": 0,
  "createdAt": {
    "$date": {
      "$numberLong": "1667218573169"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1667243283395"
    }
  }
}]